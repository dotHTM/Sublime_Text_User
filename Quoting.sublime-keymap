[
  {
    "args": {
      "file": "Packages/User/wrapComments.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["super+alt+ctrl+/"]
  },

  {
    "args": {
      "file": "Packages/User/figletCommentLine.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["super+alt+/"]
  },


  {
    "keys": ["ctrl+alt+/"],
    "command": "insert_snippet",
    "args": {
      "contents": " ### ⁄⁄⁄ ${0:$SELECTION} ⁄⁄⁄ ### "
    }
  },

  {
    "keys": ["ctrl+shift+/"],
    "command": "insert_snippet",
    "args": {
      "contents": " ### ››› ${0:$SELECTION} ‹‹‹ ### "
    }
  },
  {
    "keys": ["super+ctrl+/"],
    "command": "toggle_comment",
    "args": {
      "block": true
    },
    "caption": "Toggle Block Comment"
  },

  // Backtick as a quotation charaacter. Credit: https://forum.sublimetext.com/t/recognize-the-character-as-a-type-of-a-quotation/15097/3

  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args": {
      "contents": "`$0`"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|;|\\}|$)",
        "match_all": true
      }
    ]
  },

  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args": {
      "contents": "`${0:$SELECTION}`"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },

  {
    "keys": ["`"],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^`",
        "match_all": true
      }
    ]
  },

  {
    "keys": ["backspace"],
    "command": "run_macro_file",
    "args": {
      "file": "Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "`$",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^`",
        "match_all": true
      }
    ]
  },

  // lt-gt wrap, modified of above

  {
    "keys": ["<"],
    "command": "insert_snippet",
    "args": {
      "contents": "<${0:$SELECTION}>"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },

  // space wrap, modified of above

  {
    "keys": [" "],
    "command": "insert_snippet",
    "args": {
      "contents": " ${0:$SELECTION} "
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  // dot wrap, modified of above

  {
    "keys": ["."],
    "command": "insert_snippet",
    "args": {
      "contents": ".${0:$SELECTION}."
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },

  // bash variable wrap, modified of above

  {
    "keys": ["$"],
    "command": "insert_snippet",
    "args": {
      "contents": "\\$\\{${0:$SELECTION}\\}"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },

  // slash wrap, modified of above

  {
    "keys": ["/"],
    "command": "insert_snippet",
    "args": {
      "contents": "/${0:$SELECTION}/"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },

  // * wrap, modified of above

  {
    "keys": ["*"],
    "command": "insert_snippet",
    "args": {
      "contents": "*${0:$SELECTION}*"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },

  // _ wrap, modified of above

  {
    "keys": ["_"],
    "command": "insert_snippet",
    "args": {
      "contents": "_${0:$SELECTION}_"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },

  // Change quotes
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'"
    },
    "context": [
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "[\"`']$",
        "match_all": true
      }
    ]
  },
  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args": {
      "contents": "`"
    },
    "context": [
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "[\"`']$",
        "match_all": true
      }
    ]
  },
  {
    "keys": ["\""],
    "command": "insert_snippet",
    "args": {
      "contents": "\""
    },
    "context": [
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "[\"`']$",
        "match_all": true
      }
    ]
  }
]

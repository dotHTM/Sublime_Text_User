[
  {
    "comment": "Wrap 'AppleScript Concat', has selection",
    "keys": [
      "&"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "&${0:$SELECTION}&"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'AppleScript Concat', remove 1 left and 1 right",
    "keys": [
      "&"
    ],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "&$",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^&",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'AppleScript Concat', enter or exit group",
    "keys": [
      "&"
    ],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(&|&)",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'General, New line', has selection",
    "keys": [
      "enter"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "\n${0:$SELECTION}\n"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'General, New line', remove 1 left and 1 right",
    "keys": [
      "enter"
    ],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "\n$",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^\n",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'General, Space', has selection",
    "keys": [
      " "
    ],
    "command": "insert_snippet",
    "args": {
      "contents": " ${0:$SELECTION} "
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'General, Space', remove 1 left and 1 right",
    "keys": [
      " "
    ],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": " $",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^ ",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'General, Space', enter or exit group",
    "keys": [
      " "
    ],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^( | )",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'HTML tags', has selection",
    "keys": [
      "<"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "<${0:$SELECTION}>"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'HTML tags', remove 1 left and 1 right",
    "keys": [
      "<"
    ],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "<$",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^>",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'HTML tags', enter or exit group",
    "keys": [
      "<"
    ],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(<|>)",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Asterisk', has selection",
    "keys": [
      "*"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "*${0:$SELECTION}*"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Asterisk', remove 1 left and 1 right",
    "keys": [
      "*"
    ],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "*$",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^*",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Code Block', selection_empty, not mid-word",
    "keys": [
      "alt+`"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "```\n$0\n```"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|\\}|>|$)",
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "not_regex_contains",
        "operand": "[a-zA-Z0-9]$",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Code Block', has selection",
    "keys": [
      "alt+`"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "```\n${0:$SELECTION}\n```"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Underscore', has selection",
    "keys": [
      "_"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "_${0:$SELECTION}_"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Underscore', remove 1 left and 1 right",
    "keys": [
      "_"
    ],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "_$",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^_",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Perl String Concat', has selection",
    "keys": [
      "."
    ],
    "command": "insert_snippet",
    "args": {
      "contents": ".${0:$SELECTION}."
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Perl String Concat', remove 1 left and 1 right",
    "keys": [
      "."
    ],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "\\.$",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^\\.",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Perl String Concat', enter or exit group",
    "keys": [
      "."
    ],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(.|.)",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python f-strings double', selection_empty, not mid-word",
    "keys": [
      "ctrl+f"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "f\"$0\""
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|\\}|>|$)",
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "not_regex_contains",
        "operand": "[a-zA-Z0-9]$",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python f-strings double', has selection",
    "keys": [
      "ctrl+f"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "f\"${0:$SELECTION}\""
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python f-strings single', selection_empty, not mid-word",
    "keys": [
      "ctrl+alt+f"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "f'$0'"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|\\}|>|$)",
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "not_regex_contains",
        "operand": "[a-zA-Z0-9]$",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python f-strings single', has selection",
    "keys": [
      "ctrl+alt+f"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "f'${0:$SELECTION}'"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python String Contat', has selection",
    "keys": [
      "+"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "+${0:$SELECTION}+"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python String Contat', remove 1 left and 1 right",
    "keys": [
      "+"
    ],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "regex_contains",
        "operand": "+$",
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^+",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python String Contat', enter or exit group",
    "keys": [
      "+"
    ],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(+|+)",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "not_equal",
        "operand": "punctuation.definition.string.begin",
        "match_all": true
      },
      {
        "key": "eol_selector",
        "operator": "not_equal",
        "operand": "string.quoted.single - punctuation.definition.string.end",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python Triple Double Quotes', selection_empty, not mid-word",
    "keys": [
      "ctrl+'"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "\"\"\"$0\"\"\""
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|\\}|>|$)",
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "not_regex_contains",
        "operand": "[a-zA-Z0-9]$",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python Triple Double Quotes', has selection",
    "keys": [
      "ctrl+'"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "\"\"\"${0:$SELECTION}\"\"\""
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python Triple Single Quotes', selection_empty, not mid-word",
    "keys": [
      "ctrl+alt+'"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "'''$0'''"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^(?:\t| |\\)|]|\\}|>|$)",
        "match_all": true
      },
      {
        "key": "preceding_text",
        "operator": "not_regex_contains",
        "operand": "[a-zA-Z0-9]$",
        "match_all": true
      }
    ]
  },
  {
    "comment": "Wrap 'Python Triple Single Quotes', has selection",
    "keys": [
      "ctrl+alt+'"
    ],
    "command": "insert_snippet",
    "args": {
      "contents": "'''${0:$SELECTION}'''"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      }
    ]
  }
]
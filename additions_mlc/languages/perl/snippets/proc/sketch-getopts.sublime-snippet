<snippet>
	<content><![CDATA[
#!/usr/bin/env perl
# $TM_FILENAME
#   ${100:Description}

use feature ':5.16';

use strict;
use warnings;
use English;

use Carp;
use Data::Dumper::Concise;
use Time::Piece;

use Getopt::Long;

## Package Variables
our \$VERSION = 0.01;

our \$HELP = 0;

our \$VERBOSE = 0;
our \$DEBUG   = 0;
our \$DRY_RUN = 0;

### ⁄⁄⁄ Your Package variables ⁄⁄⁄ ###
# our \$SOME_VARIABLE = 0;

######################################################
#                                                    #
#                                  88                #
#                                  ""                #
#                                                    #
#    88,dPYba,,adPYba,  ,adPPYYba, 88 8b,dPPYba,     #
#    88P'   "88"    "8a ""     `Y8 88 88P'   `"8a    #
#    88      88      88 ,adPPPPP88 88 88       88    #
#    88      88      88 88,    ,88 88 88       88    #
#    88      88      88 `"8bbdP"Y8 88 88       88    #
#                                                    #
#                                                    #
######################################################

sub main {
    my (undef) = @_;

    say some_process();
    debug_msg( 'hello world', 'how are you?', 'foo bar' );

    return 0;    #success
}    ##    main

##################################################
#                                                #
#                                                #
#                             ,d                 #
#                             88                 #
#     ,adPPYba,  8b,dPPYba, MM88MMM ,adPPYba,    #
#    a8"     "8a 88P'    "8a  88    I8[    ""    #
#    8b       d8 88       d8  88     `"Y8ba,     #
#    "8a,   ,a8" 88b,   ,a8"  88,   aa    ]8I    #
#     `"YbbdP"'  88`YbbdP"'   "Y888 `"YbbdP"'    #
#                88                              #
#                88                              #
##################################################

sub process_opts {
    my (undef) = @_;
    GetOptions(
        'help'      => \\\$HELP,
        'debug'     => \\\$DEBUG,
        'verbose=i' => \\\$VERBOSE,

    );
    return 1;    #success
}    ##    process_opts

sub validate_opts {
    my (undef) = @_;

    usage() if \$HELP;
    ## body...

    return 'validate_opts: wip, placeholder';
}    ##    validate_opts

sub usage {
    my (\$message) = @_;
    my \$usage_string = << 'EOF';
Usage for this script:
    --help             print this help
    --debug            debug
    --verbose          increase verbosity of debug messages

   --YOUR_OPTIONS
EOF

    \$usage_string .= 'ARGUMENT ERROR: ' . \$message if \$message;
    say join "\n", "\$PROGRAM_NAME:", "\$message", \$usage_string;

    exit 2;    # failed: usage error
}    ##    usage

#####################################################
#                                                   #
#                          88                       #
#                          88                       #
#                          88                       #
#    ,adPPYba, 88       88 88,dPPYba,  ,adPPYba,    #
#    I8[    "" 88       88 88P'    "8a I8[    ""    #
#     `"Y8ba,  88       88 88       d8  `"Y8ba,     #
#    aa    ]8I "8a,   ,a88 88b,   ,a8" aa    ]8I    #
#    `"YbbdP"'  `"YbbdP'Y8 8Y"Ybbd8"'  `"YbbdP"'    #
#                                                   #
#                                                   #
#####################################################

### ⁄⁄⁄ Basics ⁄⁄⁄ ###

sub debug_msg {
    my (@input_messages) = @_;
    if (\$DEBUG) {
        my \$timestamp = localtime->datetime;
        foreach my \$sub_message (@input_messages) {
            foreach my \$line ( split "\n", \$sub_message ) {
              say '[' . \$timestamp . '] ' . \$line;
            }
        }
    }
    return 1;
}    ##    debug_msg

sub verbose_msg{
    my (\$level, @input_messages) = @_;
    if (\$VERBOSE >= \$level) {
        my \$message   = q{};
        foreach my \$sub_message (@input_messages) {
            foreach my \$line ( split "\n", \$sub_message ) {
                \$message .= \$line . "\n";
            }
        }
        say \$message;
    }
    return 1;
}    ##    verbose_msg

### ⁄⁄⁄ Your Subs ⁄⁄⁄ ###

sub some_process {
    my ( \$input, \$parameters, @args ) = @_;
    ## body...
    return 'some_process: wip, placeholder';
}    ##    some_process

#####################################################
#                                                   #
#                                                   #
#                                                   #
#                                                   #
#     ,adPPYba, 8b,     ,d8 ,adPPYba,  ,adPPYba,    #
#    a8P_____88  `Y8, ,8P' a8P_____88 a8"     ""    #
#    8PP"""""""    )888(   8PP""""""" 8b            #
#    "8b,   ,aa  ,d8" "8b, "8b,   ,aa "8a,   ,aa    #
#     `"Ybbd8"' 8P'     `Y8 `"Ybbd8"'  `"Ybbd8"'    #
#                                                   #
#                                                   #
#####################################################
{
    # if ( not @ARGV ) { usage('No Arguments Were Given') }
    process_opts();
    validate_opts();
    exit main();
}



]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sbl</tabTrigger>
    <description>#! perl Getops::Long</description>

	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.perl</scope>
</snippet>

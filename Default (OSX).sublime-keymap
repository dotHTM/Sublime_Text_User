[
    
    // Open the Sublime Text User.sublime-project

    {
        "command": "open_dir",
        "args":
        {
            "dir": "${packages}/User/User.sublime-project"
        },
        "keys": ["super+alt+,"]
    },
    
    {
        "command": "open_dir",
        "args":
        {
            "dir": "${packages}/User/User.sublime-project"
        },
        "keys": ["super+alt+,"]
    },

    {
        "keys": ["ctrl+alt+/"],
        "command": "insert_snippet",
        "args":
        {
            "contents": " ### ⁄⁄⁄ ${0:$SELECTION} ⁄⁄⁄ ### "
        },
    },
    // Reindent
    //
    // perltidy is ctrl+shift+t
    {
        "command": "reindent",
        "args":
        {
            "single_line": false
        },
        "keys": ["ctrl+shift+r"],
    },
    {
        "keys": ["ctrl+shift+h"],
        "command": "htmlprettify"
    },

    // plugin overrides

    //case conversion
    {
        "keys": ["super+alt+k", "super+alt+l"],
        "command": "convert_to_snake"
    },
    {
        "keys": ["super+alt+k", "super+alt+u"],
        "command": "convert_to_screaming_snake"
    },
    {
        "keys": ["super+alt+k", "super+alt+k"],
        "command": "convert_to_camel"
    },
    {
        "keys": ["super+alt+k", "super+alt+p"],
        "command": "convert_to_pascal"
    },
    {
        "keys": ["super+alt+k", "super+alt+."],
        "command": "convert_to_dot"
    },
    {
        "keys": ["super+alt+k", "super+alt+h"],
        "command": "convert_to_dash"
    },
    {
        "keys": ["super+alt+k", "super+alt+i"],
        "command": "convert_to_separate_words"
    },
    {
        "keys": ["super+alt+k", "super+alt+/"],
        "command": "convert_to_slash"
    },
    {
        "keys": ["super+alt+k", "super+alt+b"],
        "command": "convert_to_back_slash"
    },


    // Macros

    {
        "args":
        {
            "file": "Packages/User/foldEverything.sublime-macro"
        },
        "command": "run_macro_file",
        "keys": ["super+k, super+shift+0"]
    },

    {
        "args":
        {
            "file": "Packages/User/figletCommentLine.sublime-macro"
        },
        "command": "run_macro_file",
        "keys": ["super+alt+/"]
    },

    {
        "args":
        {
            "file": "Packages/User/wrapComments.sublime-macro"
        },
        "command": "run_macro_file",
        "keys": ["super+alt+ctrl+/"]
    },

    // Bookmarks

    {
        "keys": ["ctrl+alt+n"],
        "command": "next_bookmark"
    },

    {
        "keys": ["ctrl+alt+p"],
        "command": "prev_bookmark"
    },

    {
        "keys": ["ctrl+alt+b"],
        "command": "toggle_bookmark"
    },

    {
        "keys": ["ctrl+alt+c"],
        "command": "clear_bookmarks"
    },

    {
        "keys": ["ctrl+alt+a"],
        "command": "select_all_bookmarks"
    },



    // Great suggestion to make word wrap a keyboard shortcut. credit https://github.com/soffes/sublime

    {
        "keys": ["super+alt+w"],
        "command": "toggle_setting",
        "args":
        {
            "setting": "word_wrap"
        }
    },

    {
        "command": "set_setting",
        "keys": ["super+alt+r"],
        "args":
        {
            "setting": "wrap_width",
            "value": 0
        }
    },

    {
        "command": "set_setting",
        "keys": ["super+ctrl+r"],
        "args":
        {
            "setting": "wrap_width",
            "value": 88
        }
    },

    // View options on the editor

    {
        "command": "toggle_tabs",
        "keys": ["super+k", "super+n"]
    },

    {
        "command": "toggle_minimap",
        "keys": ["super+k", "super+m"]
    },

    {
        "command": "toggle_show_open_files",
        "keys": ["super+k", "super+o"]
    },

    // Refresh the sidebar folders, when you connect or disconnect from a mounted server

    {
        "command": "refresh_folder_list",
        "keys": ["super+shift+r"]
    },

    // PlainTasks

    {
        "keys": ["control+d"],
        "command": "plain_tasks_complete",
        "context": [
        {
            "key": "selector",
            "operator": "equal",
            "operand": "text.todo"
        }]
    },

    {
        "keys": ["control+u"],
        "command": "plain_tasks_open_url",
        "context": [
        {
            "key": "selector",
            "operator": "equal",
            "operand": "text.todo"
        }]
    },

    {
        "keys": ["super+shift+a"],
        "command": "plain_tasks_archive",
        "context": [
        {
            "key": "selector",
            "operator": "equal",
            "operand": "text.todo"
        }]
    },

    {
        "keys": ["super+shift+o"],
        "command": "plain_tasks_archive_org",
        "context": [
        {
            "key": "selector",
            "operator": "equal",
            "operand": "text.todo"
        }]
    },

    // Some handy Layouts

    {
        "command": "set_layout",
        "keys": ["control+shift+f2"],
        "caption": "3 Pane Third bottom",
        "args":
        {
            "cols": [0.0, 0.67, 1.0],
            "rows": [0.0, 0.67, 1.0],
            "cells": [
                [0, 0, 2, 1],
                [0, 1, 2, 2]
            ]
        }
    },

    {
        "command": "set_layout",
        "keys": ["control+shift+f3"],
        "caption": "3 Pane Third right",
        "args":
        {
            "cols": [0.0, 0.67, 1.0],
            "rows": [0.0, 0.5, 1.0],
            "cells": [
                [0, 0, 1, 2],
                [1, 0, 2, 1],
                [1, 1, 2, 2]
            ]
        }
    },

    {
        "command": "set_layout",
        "keys": ["control+shift+f4"],
        "caption": "2-3 Pane Third bottom",
        "args":
        {
            "cols": [0.0, 0.33, 0.5, 0.67, 1.0],
            "rows": [0.0, 0.67, 1.0],
            "cells": [
                [0, 0, 2, 1],
                [2, 0, 4, 1],
                [0, 1, 1, 2],
                [1, 1, 3, 2],
                [3, 1, 4, 2]
            ]
        }
    },

    {
        "command": "set_layout",
        "keys": ["control+shift+f5"],
        "caption": "5-pane",
        "args":
        {
            "cols": [0.0, 0.33, 0.5, 0.67, 1.0],
            "rows": [0.0, 0.375, 0.5, 0.75, 1.0],
            "cells": [
                [0, 0, 3, 3],
                [3, 0, 4, 1],
                [3, 1, 4, 3],
                [0, 3, 2, 4],
                [2, 3, 4, 4]
            ]
        }
    },

    {
        "command": "set_layout",
        "keys": ["control+shift+f6"],
        "caption": "6-pane",
        "args":
        {
            "cols": [0.0, 0.4, 0.5, 0.8, 1.0],
            "rows": [0.0, 0.4, 0.5, 0.8, 1.0],
            "cells": [
                [0, 0, 1, 3],
                [1, 0, 3, 3],
                [3, 0, 4, 1],
                [3, 1, 4, 3],
                [0, 3, 2, 4],
                [2, 3, 4, 4]
            ]
        }
    },

    // Backtick as a quotation charaacter. Credit: https://forum.sublimetext.com/t/recognize-the-character-as-a-type-of-a-quotation/15097/3

    {
        "keys": ["`"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "`$0`"
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": true,
            "match_all": true
        },
        {
            "key": "following_text",
            "operator": "regex_contains",
            "operand": "^(?:\t| |\\)|]|;|\\}|$)",
            "match_all": true
        }]
    },

    {
        "keys": ["`"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "`${0:$SELECTION}`"
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        }]
    },

    {
        "keys": ["`"],
        "command": "move",
        "args":
        {
            "by": "characters",
            "forward": true
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": true,
            "match_all": true
        },
        {
            "key": "following_text",
            "operator": "regex_contains",
            "operand": "^`",
            "match_all": true
        }]
    },

    {
        "keys": ["backspace"],
        "command": "run_macro_file",
        "args":
        {
            "file": "Packages/Default/Delete Left Right.sublime-macro"
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": true,
            "match_all": true
        },
        {
            "key": "preceding_text",
            "operator": "regex_contains",
            "operand": "`$",
            "match_all": true
        },
        {
            "key": "following_text",
            "operator": "regex_contains",
            "operand": "^`",
            "match_all": true
        }]
    },

    // lt-gt wrap, modified of above

    {
        "keys": ["<"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "<${0:$SELECTION}>"
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        }]
    },

    // space wrap, modified of above

    {
        "keys": [" "],
        "command": "insert_snippet",
        "args":
        {
            "contents": " ${0:$SELECTION} "
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        }]
    },

    // bash variable wrap, modified of above

    {
        "keys": ["$"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "\\$\\{${0:$SELECTION}\\}"
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        }]
    },

    // slash wrap, modified of above

    {
        "keys": ["/"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "/${0:$SELECTION}/"
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        }]
    },

    // * wrap, modified of above

    {
        "keys": ["*"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "*${0:$SELECTION}*"
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        }]
    },

    // _ wrap, modified of above

    {
        "keys": ["_"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "_${0:$SELECTION}_"
        },
        "context": [
        {
            "key": "setting.auto_match_enabled",
            "operator": "equal",
            "operand": true
        },
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        }]
    },

    // Change quotes
    {
        "keys": ["'"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "'"
        },
        "context": [
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        },
        {
            "key": "preceding_text",
            "operator": "regex_contains",
            "operand": "[\"`']$",
            "match_all": true
        }]
    },
    {
        "keys": ["`"],
        "command": "insert_snippet",
        "args":
        {
            "contents": "`"
        },
        "context": [
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        },
        {
            "key": "preceding_text",
            "operator": "regex_contains",
            "operand": "[\"`']$",
            "match_all": true
        }]
    },
    {
        "keys": ["\""],
        "command": "insert_snippet",
        "args":
        {
            "contents": "\""
        },
        "context": [
        {
            "key": "selection_empty",
            "operator": "equal",
            "operand": false,
            "match_all": true
        },
        {
            "key": "preceding_text",
            "operator": "regex_contains",
            "operand": "[\"`']$",
            "match_all": true
        }]
    },

    // I forget why some of these are set...  Some are re-assertions of the default keymap to re-override plugins that steal them.
    {
        "keys": ["super+ctrl+a"],
        "command": "alignment"
    },

    {
        "keys": ["super+d"],
        "command": "find_under_expand"
    },

    {
        "keys": ["super+shift+a"],
        "command": "alignment"
    },

    {
        "keys": ["super+option+a"],
        "command": "expand_selection",
        "args":
        {
            "to": "tag"
        }
    }
]
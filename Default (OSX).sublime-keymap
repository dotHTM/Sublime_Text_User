[
  // Emmet actions

  // Expand abbreviation anywhere
  {
    "keys": ["ctrl+e"],
    "command": "emmet_expand_abbreviation"
  },

  // Enter abbreviation mode: explicitly enter abbreviation anywhere
  // with interactive preview
  {
    "keys": ["ctrl+."],
    "command": "emmet_enter_abbreviation"
  },

  // Wrap with Abbreviation
  {
    "keys": ["ctrl+w"],
    "command": "emmet_wrap_with_abbreviation",
    "context": [
    {
      "key": "setting.is_widget",
      "operand": false
    }]
  },


  //  //  //  //  //  //

  {
    "keys": ["ctrl+shift+w"],
    "command": "wrap_lines",
    "args":
    {
      "width": 80
    },
    "caption": "Wrap paragraph at 80 characters"
  },


  /************************************************************/
  /* Disable default or plugin keys                           */
  /************************************************************/
  {
    "command": "noop",
    "keys": ["super+t"],
  },
  {
    "keys": ["super+alt+o"],
    "command": "noop",
  },

  /************************************************************/
  /* New or override keys                                     */
  /************************************************************/
  {
    "command": "toggle_selection_scope",
    "keys": ["shift+ctrl+o"],
  },
  { // Open in Sublime Merge
    "keys": ["super+alt+z"],
    "command": "sublime_merge_open_repo"
  },
  { // Match the shortcut in Sublime Merge
    "keys": ["super+shift+o"],
    "command": "prompt_select_workspace"
  },
  {
    "keys": ["ctrl+shift+f"],
    "command": "toggle_full_screen"
  },
  {
    "keys": ["super+ctrl+f"],
    "command": "show_panel",
    "args":
    {
      "panel": "find_in_files"
    }
  },
  // command": "new_window
  {
    "keys": ["super+alt+shift+n"],
    "command": "new_window"
  },
  {
    "keys": ["super+k", "super+k"],
    "command": "show_overlay",
    "args":
    {
      "overlay": "command_palette"
    }
  },
  // Open the Sublime Text User.sublime-project
  {
    "command": "open_dir",
    "args":
    {
      "dir": "${packages}/User/User.sublime-project"
    },
    "keys": ["super+alt+,"]
  },
  {
    "command": "open_dir",
    "args":
    {
      "dir": "${packages}/User/User.sublime-project"
    },
    "keys": ["super+alt+,"]
  },
  {
    "keys": ["ctrl+alt+/"],
    "command": "insert_snippet",
    "args":
    {
      "contents": " ### ⁄⁄⁄ ${0:$SELECTION} ⁄⁄⁄ ### "
    },
  },
  {
    "keys": ["ctrl+shift+/"],
    "command": "insert_snippet",
    "args":
    {
      "contents": " ### ››› ${0:$SELECTION} ‹‹‹ ### "
    },
  },
  {
    "keys": ["super+ctrl+/"],
    "command": "toggle_comment",
    "args":
    {
      "block": true
    },
    "caption": "Toggle Block Comment"
  },
  // Bookmarks
  {
    "keys": ["ctrl+alt+x"],
    "command": "next_bookmark"
  },
  {
    "keys": ["ctrl+alt+z"],
    "command": "prev_bookmark"
  },
  {
    "keys": ["ctrl+alt+b"],
    "command": "toggle_bookmark"
  },
  {
    "keys": ["ctrl+alt+w"],
    "command": "clear_bookmarks"
  },
  {
    "keys": ["ctrl+alt+a"],
    "command": "select_all_bookmarks"
  },
  //
  {
    "keys": ["ctrl+alt+shift+w"],
    "command": "clear_bookmarks",
  },
  //
  // Reindent
  //

  {
    "keys": ["ctrl+shift+h"],
    "command": "htmlprettify"
  },
  // plugin overrides
  // Origami
  {
    "keys": ["super+shift+alt+w"],
    "command": "destroy_pane",
    "args":
    {
      "direction": "self"
    },
    "caption": "Current Pane"
  },
  //case conversion
  {
    "keys": ["super+alt+k", "super+alt+l"],
    "command": "convert_to_snake"
  },
  {
    "keys": ["super+alt+k", "super+alt+u"],
    "command": "convert_to_screaming_snake"
  },
  {
    "keys": ["super+alt+k", "super+alt+k"],
    "command": "convert_to_camel"
  },
  {
    "keys": ["super+alt+k", "super+alt+p"],
    "command": "convert_to_pascal"
  },
  {
    "keys": ["super+alt+k", "super+alt+."],
    "command": "convert_to_dot"
  },
  {
    "keys": ["super+alt+k", "super+alt+h"],
    "command": "convert_to_dash"
  },
  {
    "keys": ["super+alt+k", "super+alt+i"],
    "command": "convert_to_separate_words"
  },
  {
    "keys": ["super+alt+k", "super+alt+/"],
    "command": "convert_to_slash"
  },
  {
    "keys": ["super+alt+k", "super+alt+b"],
    "command": "convert_to_back_slash"
  },
  // Macros

  { // Kind Formatters, those that don't complain when attempted on other types
    "args":
    {
      "file": "Packages/User/additions_mlc/macros/kindFormatters.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["shift+ctrl+r"],
  },

  { // perltidy
    "args":
    {
      "file": "Packages/User/additions_mlc/macros/perltidy.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["command+t"],
  },
  { // SQLperltidy
    "args":
    {
      "file": "Packages/User/additions_mlc/macros/SQLperlTidy.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["ctrl+s"],
  },


  { // csvtidy
    "args":
    {
      "file": "Packages/User/additions_mlc/macros/csv_tidy.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["shift+ctrl+e"],
  },



  { // perltidy & fold
    "args":
    {
      "file": "Packages/User/additions_mlc/macros/perltidy_fold.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["alt+ctrl+t"],
  },
  { // foldEverything
    "args":
    {
      "file": "Packages/User/additions_mlc/macros/foldEverything.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["super+k, super+shift+0"]
  },
  { //figletCommentLine
    "args":
    {
      "file": "Packages/User/additions_mlc/macros/figletCommentLine.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["super+alt+/"],
    /**************************************************************************/
    /*                                                                        */
    /*       ad88                        88                                   */
    /*      d8"                          88                                   */
    /*      88                           88                                   */
    /*    MM88MMM ,adPPYba,   ,adPPYba,  88,dPPYba,  ,adPPYYba, 8b,dPPYba,    */
    /*      88   a8"     "8a a8"     "8a 88P'    "8a ""     `Y8 88P'   "Y8    */
    /*      88   8b       d8 8b       d8 88       d8 ,adPPPPP88 88            */
    /*      88   "8a,   ,a8" "8a,   ,a8" 88b,   ,a8" 88,    ,88 88            */
    /*      88    `"YbbdP"'   `"YbbdP"'  8Y"Ybbd8"'  `"8bbdP"Y8 88            */
    /*                                                                        */
    /*                                                                        */
    /**************************************************************************/
  },
  {
    "args":
    {
      "file": "Packages/User/additions_mlc/macros/wrapComments.sublime-macro"
    },
    "command": "run_macro_file",
    "keys": ["super+alt+ctrl+/"],
    // Eiusmod mollit proident incididunt fugiat
    // exercitation occaecat sunt quis minim magna
    // voluptate sint occaecat aliqua tempor eu minim
    // aliquip ut mollit anim laboris elit ullamco non
    // minim quis laborum quis nulla.
  },
  // Bookmarks
  {
    "keys": ["ctrl+alt+n"],
    "command": "next_bookmark"
  },
  {
    "keys": ["ctrl+alt+p"],
    "command": "prev_bookmark"
  },
  {
    "keys": ["ctrl+alt+b"],
    "command": "toggle_bookmark"
  },
  {
    "keys": ["ctrl+alt+c"],
    "command": "clear_bookmarks"
  },
  {
    "keys": ["ctrl+alt+a"],
    "command": "select_all_bookmarks"
  },
  // Great suggestion to make word wrap a keyboard shortcut. credit
  // https://github.com/soffes/sublime
  {
    "keys": ["super+alt+w"],
    "command": "toggle_setting",
    "args":
    {
      "setting": "word_wrap"
    }
  },
  {
    "command": "set_setting",
    "keys": ["super+alt+r"],
    "args":
    {
      "setting": "wrap_width",
      "value": 0
    }
  },
  {
    "command": "set_setting",
    "keys": ["super+ctrl+r"],
    "args":
    {
      "setting": "wrap_width",
      "value": 88
    }
  },
  // View options on the editor
  {
    "command": "toggle_tabs",
    "keys": ["super+k", "super+n"]
  },
  {
    "command": "toggle_minimap",
    "keys": ["super+k", "super+m"]
  },
  {
    "command": "toggle_show_open_files",
    "keys": ["super+k", "super+o"]
  },
  // Refresh the sidebar folders, when you connect or disconnect from a mounted
  // server
  {
    "command": "refresh_folder_list",
    "keys": ["super+shift+r"]
  },
  // PlainTasks
  {
    "keys": ["control+d"],
    "command": "plain_tasks_complete",
    "context": [
    {
      "key": "selector",
      "operator": "equal",
      "operand": "text.todo"
    }]
  },
  {
    "keys": ["control+u"],
    "command": "plain_tasks_open_url",
    "context": [
    {
      "key": "selector",
      "operator": "equal",
      "operand": "text.todo"
    }]
  },
  {
    "keys": ["super+shift+a"],
    "command": "plain_tasks_archive",
    "context": [
    {
      "key": "selector",
      "operator": "equal",
      "operand": "text.todo"
    }]
  },
  {
    "keys": ["super+shift+o"],
    "command": "plain_tasks_archive_org",
    "context": [
    {
      "key": "selector",
      "operator": "equal",
      "operand": "text.todo"
    }]
  },
  // Some handy Layouts
  {
    "command": "set_layout",
    "keys": ["control+shift+f2"],
    "caption": "3 Pane Third bottom",
    "args":
    {
      "cols": [0.0, 0.67, 1.0],
      "rows": [0.0, 0.67, 1.0],
      "cells": [
        [0, 0, 2, 1],
        [0, 1, 2, 2]
      ]
    }
  },
  {
    "command": "set_layout",
    "keys": ["control+shift+f3"],
    "caption": "3 Pane Third right",
    "args":
    {
      "cols": [0.0, 0.67, 1.0],
      "rows": [0.0, 0.5, 1.0],
      "cells": [
        [0, 0, 1, 2],
        [1, 0, 2, 1],
        [1, 1, 2, 2]
      ]
    }
  },
  {
    "command": "set_layout",
    "keys": ["control+shift+f4"],
    "caption": "2-3 Pane Third bottom",
    "args":
    {
      "cols": [0.0, 0.33, 0.5, 0.67, 1.0],
      "rows": [0.0, 0.67, 1.0],
      "cells": [
        [0, 0, 2, 1],
        [2, 0, 4, 1],
        [0, 1, 1, 2],
        [1, 1, 3, 2],
        [3, 1, 4, 2]
      ]
    }
  },
  {
    "command": "set_layout",
    "keys": ["control+shift+f5"],
    "caption": "5-pane",
    "args":
    {
      "cols": [0.0, 0.33, 0.5, 0.67, 1.0],
      "rows": [0.0, 0.375, 0.5, 0.75, 1.0],
      "cells": [
        [0, 0, 3, 3],
        [3, 0, 4, 1],
        [3, 1, 4, 3],
        [0, 3, 2, 4],
        [2, 3, 4, 4]
      ]
    }
  },
  {
    "command": "set_layout",
    "keys": ["control+shift+f6"],
    "caption": "6-pane",
    "args":
    {
      "cols": [0.0, 0.4, 0.5, 0.8, 1.0],
      "rows": [0.0, 0.4, 0.5, 0.8, 1.0],
      "cells": [
        [0, 0, 1, 3],
        [1, 0, 3, 3],
        [3, 0, 4, 1],
        [3, 1, 4, 3],
        [0, 3, 2, 4],
        [2, 3, 4, 4]
      ]
    }
  },
  // Backtick as a quotation charaacter. Credit:
  // https://forum.sublimetext.com/t/recognize-the-character-as-a-type-of-a-quotation/15097/3
  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "`$0`"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": true,
      "match_all": true
    },
    {
      "key": "following_text",
      "operator": "regex_contains",
      "operand": "^(?:\t| |\\)|]|;|\\}|$)",
      "match_all": true
    }]
  },
  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "`${0:$SELECTION}`"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  {
    "keys": ["`"],
    "command": "move",
    "args":
    {
      "by": "characters",
      "forward": true
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": true,
      "match_all": true
    },
    {
      "key": "following_text",
      "operator": "regex_contains",
      "operand": "^`",
      "match_all": true
    }]
  },
  {
    "keys": ["backspace"],
    "command": "run_macro_file",
    "args":
    {
      "file": "Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": true,
      "match_all": true
    },
    {
      "key": "preceding_text",
      "operator": "regex_contains",
      "operand": "`$",
      "match_all": true
    },
    {
      "key": "following_text",
      "operator": "regex_contains",
      "operand": "^`",
      "match_all": true
    }]
  },
  // lt-gt wrap, modified of above
  {
    "keys": ["<"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "<${0:$SELECTION}>"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // space wrap, modified of above
  {
    "keys": [" "],
    "command": "insert_snippet",
    "args":
    {
      "contents": " ${0:$SELECTION} "
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // tab shift
  {
    "keys": ["tab"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "\t${0:$SELECTION}"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // return wrap, modified of above
  {
    "keys": ["enter"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "\n${0:$SELECTION}\n"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // dot wrap, modified of above
  {
    "keys": ["."],
    "command": "insert_snippet",
    "args":
    {
      "contents": ".${0:$SELECTION}."
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // bash variable wrap, modified of above
  {
    "keys": ["$"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "\\$\\{${0:$SELECTION}\\}"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // perl hash wrap, modified of above
  {
    "keys": ["%"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "%\\{${0:$SELECTION}\\}"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // perl array wrap, modified of above
  {
    "keys": ["@"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "@\\{${0:$SELECTION}\\}"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // slash wrap, modified of above
  {
    "keys": ["/"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "/${0:$SELECTION}/"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // * wrap, modified of above
  {
    "keys": ["*"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "*${0:$SELECTION}*"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },
  // _ wrap, modified of above
  {
    "keys": ["_"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "_${0:$SELECTION}_"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },

  // full-line-regex wrap, modified of above
  {
    "keys": ["^"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "^${0:$SELECTION}\\$"
    },
    "context": [
    {
      "key": "setting.auto_match_enabled",
      "operator": "equal",
      "operand": true
    },
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    }]
  },





  // Change quotes
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "'"
    },
    "context": [
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    },
    {
      "key": "preceding_text",
      "operator": "regex_contains",
      "operand": "[\"`']$",
      "match_all": true
    }]
  },
  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args":
    {
      "contents": "`"
    },
    "context": [
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    },
    {
      "key": "preceding_text",
      "operator": "regex_contains",
      "operand": "[\"`']$",
      "match_all": true
    }]
  },
  {
    "keys": ["\""],
    "command": "insert_snippet",
    "args":
    {
      "contents": "\""
    },
    "context": [
    {
      "key": "selection_empty",
      "operator": "equal",
      "operand": false,
      "match_all": true
    },
    {
      "key": "preceding_text",
      "operator": "regex_contains",
      "operand": "[\"`']$",
      "match_all": true
    }]
  },
  // I forget why some of these are set...  Some are re-assertions of the
  // default keymap to re-override plugins that steal them.
  {
    "keys": ["super+ctrl+a"],
    "command": "alignment"
  },
  {
    "keys": ["super+d"],
    "command": "find_under_expand"
  },
  {
    "keys": ["super+shift+a"],
    "command": "expand_selection",
    "args":
    {
      "to": "tag"
    }
  }
]
